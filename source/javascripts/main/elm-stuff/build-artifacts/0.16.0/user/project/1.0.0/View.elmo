Elm.View = Elm.View || {};
Elm.View.make = function (_elm) {
   "use strict";
   _elm.View = _elm.View || {};
   if (_elm.View.values) return _elm.View.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Issues$About = Elm.Issues.About.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Update = Elm.Update.make(_elm);
   var _op = {};
   var innerStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                   ,{ctor: "_Tuple2",_0: "flex-direction",_1: "column"}
                                                   ,{ctor: "_Tuple2",_0: "align-items",_1: "center"}
                                                   ,{ctor: "_Tuple2",_0: "justify-content",_1: "center"}
                                                   ,{ctor: "_Tuple2",_0: "height",_1: "100%"}
                                                   ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}]));
   var closeHandler = function (address) {    return A2($Html$Events.onClick,address,$Update.ExpandIssue($Maybe.Nothing));};
   var makeExpandHandler = F2(function (address,id) {    return A2($Html$Events.onClick,address,$Update.ExpandIssue($Maybe.Just(id)));});
   var makeHoverHandler = F2(function (address,id) {    return A2($Html$Events.onMouseOver,address,$Update.HoverIssue($Maybe.Just(id)));});
   var issueStyle = F4(function (issueState,issueClass,redify,closingAnimating) {
      var _p0 = function () {
         var _p1 = issueState;
         switch (_p1.ctor)
         {case "MenuItem": return {ctor: "_Tuple4",_0: "visible",_1: "20%",_2: "solid white 2px",_3: true};
            case "Hovered": return {ctor: "_Tuple4",_0: "visible",_1: "20%",_2: "solid white 2px",_3: false};
            case "Selected": return {ctor: "_Tuple4",_0: "visible",_1: "20%",_2: "none",_3: false};
            default: return closingAnimating ? {ctor: "_Tuple4",_0: "visible",_1: "20%",_2: "solid white 2px",_3: true} : {ctor: "_Tuple4"
                                                                                                                          ,_0: "hidden"
                                                                                                                          ,_1: "0%"
                                                                                                                          ,_2: "none"
                                                                                                                          ,_3: false};}
      }();
      var visibility = _p0._0;
      var width = _p0._1;
      var border = _p0._2;
      var redified = _p0._3;
      var styles = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: width}
                                                  ,{ctor: "_Tuple2",_0: "visibility",_1: visibility}
                                                  ,{ctor: "_Tuple2",_0: "height",_1: "100%"}
                                                  ,{ctor: "_Tuple2",_0: "float",_1: "left"}
                                                  ,{ctor: "_Tuple2",_0: "display",_1: "inline-block"}
                                                  ,{ctor: "_Tuple2",_0: "border-left",_1: border}
                                                  ,{ctor: "_Tuple2",_0: "border-right",_1: border}]));
      var classes = $Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "issue",_1: true}
                                                       ,{ctor: "_Tuple2",_0: issueClass,_1: true}
                                                       ,{ctor: "_Tuple2",_0: "redified",_1: redified && redify}]));
      return _U.list([styles,classes]);
   });
   var Hidden = {ctor: "Hidden"};
   var Selected = {ctor: "Selected"};
   var Hovered = {ctor: "Hovered"};
   var MenuItem = {ctor: "MenuItem"};
   var isSelectedIssue = F2(function (issueId,maybeSelectedId) {    return _U.eq(A2($Maybe.withDefault,0,maybeSelectedId),issueId);});
   var getIssueState = F2(function (id,model) {
      return $Model.isShowingMenu(model) ? A2(isSelectedIssue,id,model.hoveredIssueId) ? Hovered : MenuItem : A2(isSelectedIssue,
      id,
      model.expandedIssueId) ? Selected : Hidden;
   });
   var viewMenuInner = F2(function (model,issue) {
      var styles = innerStyle;
      var issueDisplay = function () {
         var _p2 = A2(getIssueState,issue.id,model);
         switch (_p2.ctor)
         {case "MenuItem": return A2($Html.h1,_U.list([$Html$Attributes.$class("menu-issue-symbol")]),_U.list([$Html.text(issue.symbol)]));
            case "Hovered": return A2($Html.h3,_U.list([$Html$Attributes.$class("menu-issue-title")]),_U.list([$Html.text($String.toUpper(issue.title))]));
            case "Selected": return A2($Html.h3,_U.list([$Html$Attributes.$class("menu-issue-title")]),_U.list([$Html.text($String.toUpper(issue.title))]));
            default: return A2($Html.span,_U.list([]),_U.list([]));}
      }();
      return A2($Html.div,_U.list([styles]),_U.list([issueDisplay]));
   });
   var handlersDependingOnState = F3(function (state,id,address) {
      var whenOpenHandlers = _U.list([closeHandler(address)]);
      var whenMenuHandlers = _U.list([A2(makeHoverHandler,address,id),A2(makeExpandHandler,address,id)]);
      var _p3 = state;
      switch (_p3.ctor)
      {case "MenuItem": return whenMenuHandlers;
         case "Hovered": return whenMenuHandlers;
         case "Selected": return whenOpenHandlers;
         default: return _U.list([]);}
   });
   var viewIssueMenuItem = F3(function (address,model,issue) {
      var issueState = A2(getIssueState,issue.id,model);
      var attributes = A4(issueStyle,issueState,issue.$class,true,model.closingAnimating);
      var handlers = A3(handlersDependingOnState,issueState,issue.id,address);
      return A2($Html.section,A2($List.append,handlers,attributes),_U.list([A2(viewMenuInner,model,issue)]));
   });
   var viewOtherwheresIssueItem = F2(function (address,model) {
      var innerHtml = _U.list([A2($Html.div,
      _U.list([innerStyle]),
      _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("red-logo")]),_U.list([]))
              ,A2($Html.div,_U.list([$Html$Attributes.$class("logo-text")]),_U.list([$Html.text("OTHERWHERES")]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("tag-line-text")]),
              _U.list([A2($Html.p,_U.list([]),_U.list([$Html.text("{ mostly } true")])),A2($Html.p,_U.list([]),_U.list([$Html.text("stories")]))]))]))]);
      var issueId = 1;
      var issueState = A2(getIssueState,issueId,model);
      var attributes = A4(issueStyle,issueState,"about",false,model.closingAnimating);
      var inner = function () {
         var _p4 = issueState;
         switch (_p4.ctor)
         {case "MenuItem": return innerHtml;
            case "Hovered": return innerHtml;
            case "Selected": return innerHtml;
            default: return innerHtml;}
      }();
      var handlers = A3(handlersDependingOnState,issueState,issueId,address);
      return A2($Html.section,A2($List.append,handlers,attributes),inner);
   });
   var viewIssueMenu = F2(function (address,model) {
      return A2($List._op["::"],A2(viewOtherwheresIssueItem,address,model),A2($List.map,A2(viewIssueMenuItem,address,model),model.issues));
   });
   var issueContentAttributes = function () {
      var styles = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "80%"}
                                                  ,{ctor: "_Tuple2",_0: "height",_1: "100%"}
                                                  ,{ctor: "_Tuple2",_0: "position",_1: "absolute"}
                                                  ,{ctor: "_Tuple2",_0: "display",_1: "inline-block"}
                                                  ,{ctor: "_Tuple2",_0: "float",_1: "right"}]));
      return _U.list([$Html$Attributes.$class("issue-content"),styles]);
   }();
   var issueImageView = F2(function (_p5,handler) {
      var _p6 = _p5;
      var _p9 = _p6._2;
      var _p8 = _p6._1;
      var _p7 = _p6._0;
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("images")]),
      _U.list([A2($Html.img,_U.list([$Html$Attributes.src(_p7),$Html$Attributes.$class("small"),handler($Maybe.Just(_p7))]),_U.list([]))
              ,A2($Html.img,_U.list([$Html$Attributes.src(_p8),$Html$Attributes.$class("small"),handler($Maybe.Just(_p8))]),_U.list([]))
              ,A2($Html.img,_U.list([$Html$Attributes.src(_p9),$Html$Attributes.$class("small"),handler($Maybe.Just(_p9))]),_U.list([]))]));
   });
   var viewFromIssue = F4(function (maybeSource,imgHandler,closeHandler,issue) {
      var expanded = function (source) {
         return A2($Html.div,
         _U.list([$Html$Attributes.$class("issue-content")]),
         _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("minimize-button"),imgHandler($Maybe.Nothing)]),_U.list([]))
                 ,A2($Html.img,_U.list([$Html$Attributes.$class("big-image"),imgHandler($Maybe.Nothing),$Html$Attributes.src(source)]),_U.list([]))]));
      };
      var unexpanded = A2($Html.div,
      _U.list([$Html$Attributes.$class("issue-content")]),
      _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("close-button"),closeHandler]),_U.list([]))
              ,A2($Html.div,_U.list([$Html$Attributes.$class("red-logo")]),_U.list([]))
              ,A2($Html.h3,
              _U.list([$Html$Attributes.$class("issue-number")]),
              _U.list([$Html.text(A2($Basics._op["++"],"VOLUME ",A2($Basics._op["++"],issue.symbol,":")))]))
              ,A2($Html.h3,_U.list([$Html$Attributes.$class("issue-tagline")]),_U.list([$Html.text(issue.tagline)]))
              ,A2(issueImageView,issue.images,imgHandler)
              ,A2($Html.div,_U.list([$Html$Attributes.$class("issue-quote")]),_U.list([$Html.text(issue.quote)]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("issue-quote-credit")]),
              _U.list([$Html.text(A2($Basics._op["++"],"From ",A2($Basics._op["++"],issue.quoteStory,A2($Basics._op["++"]," by ",issue.quoteCredit))))]))
              ,A2($Html.button,_U.list([$Html$Attributes.$class("issue-content-action-button")]),_U.list([$Html.text(issue.actionButtonText)]))]));
      var _p10 = maybeSource;
      if (_p10.ctor === "Just") {
            return expanded(_p10._0);
         } else {
            return unexpanded;
         }
   });
   var viewSelectedIssue = F2(function (address,model) {
      var _p11 = model.expandedIssueId;
      if (_p11.ctor === "Just") {
            if (_p11._0 === 1) {
                  return A2($Issues$About.view,address,model);
               } else {
                  var _p12 = $Model.findSelectedIssue(model);
                  if (_p12.ctor === "Just") {
                        return A4(viewFromIssue,
                        model.maybeExpandedImage,
                        function (maybeImgSource) {
                           return A2($Html$Events.onClick,address,$Update.ExpandImage(maybeImgSource));
                        },
                        closeHandler(address),
                        _p12._0);
                     } else {
                        return A2($Html.span,_U.list([]),_U.list([]));
                     }
               }
         } else {
            return A2($Html.span,_U.list([]),_U.list([]));
         }
   });
   var view = F2(function (address,model) {
      var styles = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "100%"},{ctor: "_Tuple2",_0: "height",_1: "100%"}]));
      return A2($Html.div,
      _U.list([$Html$Attributes.id("wrapper"),styles]),
      A2($List.append,A2(viewIssueMenu,address,model),_U.list([A2(viewSelectedIssue,address,model)])));
   });
   return _elm.View.values = {_op: _op
                             ,view: view
                             ,viewSelectedIssue: viewSelectedIssue
                             ,viewFromIssue: viewFromIssue
                             ,issueImageView: issueImageView
                             ,issueContentAttributes: issueContentAttributes
                             ,viewIssueMenu: viewIssueMenu
                             ,viewOtherwheresIssueItem: viewOtherwheresIssueItem
                             ,handlersDependingOnState: handlersDependingOnState
                             ,isSelectedIssue: isSelectedIssue
                             ,MenuItem: MenuItem
                             ,Hovered: Hovered
                             ,Selected: Selected
                             ,Hidden: Hidden
                             ,getIssueState: getIssueState
                             ,issueStyle: issueStyle
                             ,makeHoverHandler: makeHoverHandler
                             ,makeExpandHandler: makeExpandHandler
                             ,closeHandler: closeHandler
                             ,viewIssueMenuItem: viewIssueMenuItem
                             ,innerStyle: innerStyle
                             ,viewMenuInner: viewMenuInner};
};