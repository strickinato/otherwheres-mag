Elm.View = Elm.View || {};
Elm.View.make = function (_elm) {
   "use strict";
   _elm.View = _elm.View || {};
   if (_elm.View.values) return _elm.View.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Issues$About = Elm.Issues.About.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Update = Elm.Update.make(_elm);
   var _op = {};
   var Hidden = {ctor: "Hidden"};
   var Selected = {ctor: "Selected"};
   var Hovered = {ctor: "Hovered"};
   var MenuItem = {ctor: "MenuItem"};
   var isSelectedIssue = F2(function (issueId,maybeSelectedId) {    return _U.eq(A2($Maybe.withDefault,0,maybeSelectedId),issueId);});
   var getIssueState = F2(function (issue,model) {
      return $Model.isShowingMenu(model) ? A2(isSelectedIssue,issue.id,model.hoveredIssueId) ? Hovered : MenuItem : A2(isSelectedIssue,
      issue.id,
      model.expandedIssueId) ? Selected : Hidden;
   });
   var viewMenuInner = F2(function (model,issue) {
      var styles = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "display",_1: "flex"}
                                                  ,{ctor: "_Tuple2",_0: "flex-direction",_1: "column"}
                                                  ,{ctor: "_Tuple2",_0: "align-items",_1: "center"}
                                                  ,{ctor: "_Tuple2",_0: "justify-content",_1: "center"}
                                                  ,{ctor: "_Tuple2",_0: "height",_1: "100%"}
                                                  ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}]));
      var issueDisplay = function () {
         var _p0 = A2(getIssueState,issue,model);
         switch (_p0.ctor)
         {case "MenuItem": return A2($Html.h1,_U.list([$Html$Attributes.$class("menu-issue-symbol")]),_U.list([$Html.text(issue.symbol)]));
            case "Hovered": return A2($Html.span,_U.list([$Html$Attributes.$class("menu-issue-title")]),_U.list([$Html.text($String.toUpper(issue.title))]));
            case "Selected": return A2($Html.span,_U.list([$Html$Attributes.$class("menu-issue-title")]),_U.list([$Html.text($String.toUpper(issue.title))]));
            default: return A2($Html.span,_U.list([]),_U.list([]));}
      }();
      return A2($Html.div,_U.list([styles]),_U.list([issueDisplay]));
   });
   var viewIssueMenuItem = F3(function (address,model,issue) {
      var expandHandler = A2($Html$Events.onClick,address,$Update.ExpandIssue($Maybe.Just(issue.id)));
      var hoverHandler = A2($Html$Events.onMouseOver,address,$Update.HoverIssue($Maybe.Just(issue.id)));
      var _p1 = function () {
         var _p2 = A2(getIssueState,issue,model);
         switch (_p2.ctor)
         {case "MenuItem": return {ctor: "_Tuple5",_0: "visible",_1: "20%",_2: "solid white 2px",_3: true,_4: true};
            case "Hovered": return {ctor: "_Tuple5",_0: "visible",_1: "20%",_2: "solid white 2px",_3: false,_4: false};
            case "Selected": return {ctor: "_Tuple5",_0: "visible",_1: "20%",_2: "none",_3: false,_4: false};
            default: return {ctor: "_Tuple5",_0: "hidden",_1: "0%",_2: "none",_3: false,_4: false};}
      }();
      var visibility = _p1._0;
      var width = _p1._1;
      var border = _p1._2;
      var redified = _p1._3;
      var blurred = _p1._4;
      var styles = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: width}
                                                  ,{ctor: "_Tuple2",_0: "visibility",_1: visibility}
                                                  ,{ctor: "_Tuple2",_0: "height",_1: "100%"}
                                                  ,{ctor: "_Tuple2",_0: "display",_1: "inline-block"}
                                                  ,{ctor: "_Tuple2",_0: "border-left",_1: border}
                                                  ,{ctor: "_Tuple2",_0: "border-right",_1: border}]));
      var classes = $Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "issue",_1: true}
                                                       ,{ctor: "_Tuple2",_0: issue.$class,_1: true}
                                                       ,{ctor: "_Tuple2",_0: "blurred",_1: blurred}
                                                       ,{ctor: "_Tuple2",_0: "redified",_1: redified}]));
      return A2($Html.section,_U.list([classes,styles,expandHandler,hoverHandler]),_U.list([A2(viewMenuInner,model,issue)]));
   });
   var viewIssueMenu = F2(function (address,model) {    return A2($List.map,A2(viewIssueMenuItem,address,model),model.issues);});
   var closeButton = function (handler) {
      var styles = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "float",_1: "right"}
                                                  ,{ctor: "_Tuple2",_0: "padding-top",_1: "20px"}
                                                  ,{ctor: "_Tuple2",_0: "padding-right",_1: "20px"}
                                                  ,{ctor: "_Tuple2",_0: "font-size",_1: "24px"}
                                                  ,{ctor: "_Tuple2",_0: "color",_1: "white"}]));
      return A2($Html.span,_U.list([styles,handler]),_U.list([$Html.text("âœ—")]));
   };
   var viewIssueContent = F2(function (address,issueView) {
      var styles = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "80%"}
                                                  ,{ctor: "_Tuple2",_0: "height",_1: "100%"}
                                                  ,{ctor: "_Tuple2",_0: "position",_1: "absolute"}
                                                  ,{ctor: "_Tuple2",_0: "display",_1: "inline-block"}
                                                  ,{ctor: "_Tuple2",_0: "float",_1: "right"}]));
      var closeHandler = A2($Html$Events.onClick,address,$Update.ExpandIssue($Maybe.Nothing));
      return A2($Html.div,_U.list([$Html$Attributes.$class("issue-content"),styles]),_U.list([closeButton(closeHandler),issueView]));
   });
   var viewSelectedIssue = F2(function (address,model) {
      var _p3 = model.expandedIssueId;
      if (_p3.ctor === "Just") {
            switch (_p3._0)
            {case 1: return A2(viewIssueContent,address,A2($Issues$About.view,address,model));
               case 2: return A2(viewIssueContent,address,$Html.text("HI!"));
               default: return A2($Html.span,_U.list([]),_U.list([]));}
         } else {
            return A2($Html.span,_U.list([]),_U.list([]));
         }
   });
   var view = F2(function (address,model) {
      var styles = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "100%"},{ctor: "_Tuple2",_0: "height",_1: "100%"}]));
      return A2($Html.div,
      _U.list([$Html$Attributes.id("wrapper"),styles]),
      A2($List.append,A2(viewIssueMenu,address,model),_U.list([A2(viewSelectedIssue,address,model)])));
   });
   return _elm.View.values = {_op: _op
                             ,view: view
                             ,viewSelectedIssue: viewSelectedIssue
                             ,viewIssueContent: viewIssueContent
                             ,closeButton: closeButton
                             ,viewIssueMenu: viewIssueMenu
                             ,isSelectedIssue: isSelectedIssue
                             ,MenuItem: MenuItem
                             ,Hovered: Hovered
                             ,Selected: Selected
                             ,Hidden: Hidden
                             ,getIssueState: getIssueState
                             ,viewIssueMenuItem: viewIssueMenuItem
                             ,viewMenuInner: viewMenuInner};
};