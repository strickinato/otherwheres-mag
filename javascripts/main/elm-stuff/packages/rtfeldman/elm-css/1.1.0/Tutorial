<h1 id="tutorial">Tutorial</h1>

<h2 id="selectors-and-properties">Selectors and Properties</h2>

<p>Let’s start by defining a width and padding for our <code>&lt;body&gt;</code> element.</p>

<p><code>elm
stylesheet { name = "homepage" }
  [ body
      [ padding (px 30)
      , width (pct 100)
      ]
  ]
</code></p>

<p>This will compile to the following CSS.</p>

<p><code>css
body {
    padding: 30px;
    width: 100%;
}
</code></p>

<p>Note that <code>(px 30)</code> compiled to <code>30px</code>. This is because <code>px</code> is a function
that applies <code>px</code> units to a number. Because it is a normal Elm function, you
call it by placing it before the number in question. Similarly, <code>(pct 100)</code>
compiles to <code>100%</code> because the <code>pct</code> function applies <code>%</code> units to a number.</p>

<p>Next let’s define a font for our menu items.</p>

<p>```elm
type CssClasses = MenuItem | Thumbnail | Sidebar</p>

<p>stylesheet { name = "homepage" }
  [ body
      [ padding (px 30)
      , width (pct 100)
      ]</p>

<p>, (.) MenuItem
      [ fontFamily [ "Georga", "serif" ]
      , fontWeight bold
      ]
  ]
```</p>

<p>This will compile to the following CSS:</p>

<p>```css
body {
    padding: 30px;
    width: 100%;
}</p>

<p>.homepageMenuItem {
    font-family: "Georgia", "serif";
    font-weight: bold;
}
```</p>

<p>There are a few things to note here.</p>

<p>First, notice that <code>(.) MenuItem</code> compiled to <code>.homepageMenuItem</code>. This breaks
down into three pieces: the selector <code>.</code>, the namespace <code>homepage</code>, and the
class name <code>MenuItem</code>.</p>

<ol>
  <li>The <code>(.)</code> represents a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors">class selector</a>,
which is where the <code>.</code> at the start of <code>.homepageMenuItem</code> came from.</li>
  <li>Passing <code>{ name = "homepage" }</code> to <code>stylesheet</code> specified that <code>"homepage"</code> will be prepended to all classes, IDs, and animation names in this stylesheet. This namespacing concept comes from
<a href="https://github.com/css-modules/css-modules">CSS Modules</a>, and it makes your styles portable by guarding against naming collisions with other stylesheets. Even if you have another stylesheet on the page with a <code>MenuItem</code> class, as long as it has a different namespace, their generated class names will not overlap.</li>
  <li>Finally, <code>MenuItem</code> represents the class selector itself. Note that we used a <a href="http://elm-lang.org/guide/model-the-problem">union type</a> to represent the class instead of a string like <code>"MenuItem"</code>. Using a union type for class names means accidental misspellings will result in compiler errors, and makes it easier to refactor stylesheet code that is shared with view code.</li>
</ol>

<p>Let’s add an <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors">ID selector</a> next.</p>

<p>```elm
type CssClasses = MenuItem | Thumbnail | Sidebar</p>

<table>
  <tbody>
    <tr>
      <td>type CssIds = Welcome</td>
      <td>Footer</td>
      <td>Hero</td>
    </tr>
  </tbody>
</table>

<p>stylesheet { name = "homepage" }
  [ body
      [ padding (px 30)
      , width (pct 100)
      ]</p>

<p>, (.) MenuItem
      [ fontFamily [ "Georga", "serif" ]
      , fontWeight bold
      ]</p>

<p>, (#) Welcome
      [ textAlign center
      , color (rgb 10 11 12)
      ]
  ]
```</p>

<p>This will compile to the following CSS:</p>

<p>```css
body {
    padding: 30px;
    width: 100%;
}</p>

<p>.homepageMenuItem {
    font-family: "Georgia", "serif";
    font-weight: bold;
}</p>

<h1 id="homepagewelcome-">homepageWelcome {</h1>
<pre><code>text-align: center;
color: rgb(10, 11, 12); } ```
</code></pre>

<p>As with <code>(.) MenuItem</code>, when you use <code>(#) Welcome</code>, <code>elm-css</code> calls <code>toString</code> on the union type <code>Welcome</code> before prepending <code>"homepage"</code> from the <code>namespace</code> and <code>"#"</code> from the <code>#</code> operator to arrive at <code>#homepageMenuItem</code>.</p>

<p>Note that <code>rgb</code> is a normal Elm function, so you call it as <code>(rgb 10 11 12)</code>
in order to get the output of <code>rgb(10, 11, 12)</code>.</p>

<p>Let’s add another style. This one declares that links have underlines only on hover.</p>

<p>```elm
type CssClasses = MenuItem | Thumbnail | Sidebar</p>

<table>
  <tbody>
    <tr>
      <td>type CssIds = Welcome</td>
      <td>Footer</td>
      <td>Hero</td>
    </tr>
  </tbody>
</table>

<p>stylesheet { name = "homepage" }
  [ body
      [ padding (px 30)
      , width (pct 100)
      ]</p>

<p>, (.) MenuItem
      [ fontFamily [ "Georga", "serif" ]
      , color (rgb 10 11 12)
      ]</p>

<p>, (#) Welcome
      [ textAlign center ]</p>

<p>, a
      [ textDecoration none</p>

<pre><code>  , with hover
      [ textDecoration underline ]
  ]   ] ```
</code></pre>

<p>The <code>with hover</code> declaration means "copy the previous selector and add <code>:hover</code>",
making it a handy way to expand upon a previous selector without writing it out again.</p>

<p>```css
body {
    padding: 30px;
    width: 100%;
}</p>

<p>.homepageMenuItem {
    font-family: "Georgia", "serif";
    font-weight: bold;
}</p>

<h1 id="homepagewelcome--1">homepageWelcome {</h1>
<pre><code>text-align: center;
color: rgb(10, 11, 12); }
</code></pre>

<p>a {
    text-decoration: none;
}</p>

<p>a:hover {
    text-decoration: underline;
}
```</p>

<p>You can also use <code>with</code> to add classes and IDs. For example:</p>

<p>```elm
stylesheet { name = "fancyButton" }
  [ button
      [ padding (px 5)</p>

<pre><code>  , with ((.) Large)
      [ fontSize (px 24)
      , padding (px 30)
      ]

  , with ((#) SignUp)
      [ fontWeight bold
      , hex "aaffbb"
      ]
  ]   ] ```
</code></pre>

<p>The above compiles to:</p>

<p>```css
button {
    padding: 5px;
}</p>

<p>button.fancyButtonLarge {
    font-size: 24px;
    padding: 30px;
}</p>

<p>button#fancyButtonSignUp {
    font-weight: bold;
    color: #aaffbb;
}
```</p>

<p>Note that although you <em>can</em> structure your styles like this, it is generally a bad idea because it increases specificity.</p>

<p>It’s best to <a href="https://css-tricks.com/strategies-keeping-css-specificity-low/">keep specificity as low as possible</a>; the above example would be easier to maintain if it did not mention <code>button</code> at all, and instead declared only class selectors and ID selectors.</p>

<p>Now let’s say we want several things to have underlines on hover only. Piece of cake!</p>

<p>```elm
stylesheet { name = "example" }
  [ each [ a, button, (.) FancyThing ]
      [ textDecoration none</p>

<pre><code>  , with hover
      [ textDecoration underline ]
  ]   ] ```
</code></pre>

<p>This will compile to the following CSS:</p>

<p>```css
a {
    text-decoration: none;
}</p>

<p>button {
    text-decoration: none;
}</p>

<p>.exampleFancyThing {
    text-decoration: none;
}</p>

<p>a:hover {
    text-decoration: underline;
}</p>

<p>button:hover {
    text-decoration: underline;
}</p>

<p>.exampleFancyThing:hover {
    text-decoration: underline;
}
```</p>

<p>Now let’s take things up a notch or two.</p>

<p>```elm
stylesheet { name = "homepage" }
  [ media "print"
      [ body
          [ width (px 1280) ]
      ]</p>

<p>, ul
      [ padding zero</p>

<pre><code>  , with (media "print")
      [ margin2 (em 1) auto ]

  , children
      [ li
          [ fontSize (pt 12) ]
      ]
  ]   ] ```
</code></pre>

<p>The above fanciness compiles to the following:</p>

<p>```css
@media "print" {
    body {
        width: 1280px;
    }
}</p>

<p>ul {
    padding: 0;
}</p>

<p>@media "print" {
    ul {
        margin: 1em auto;
    }
}</p>

<p>ul &gt; li {
    font-size: 12pt;
}
```</p>

<p>This demonstrates two different ways to do a media query. First, at the top level just like you would in CSS, with <code>media "print"</code> followed by a <code>body</code> selector and some styles. Second, using <code>with</code> to nest a media query within a <code>ul</code> selector. In either case, you end up with a top-level <code>@media</code> declaration in the compiled CSS.</p>

<p>This also introduces how to use selector combinators: in this case the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Child_selectors">child combinator</a>, represented in CSS as the <code>&gt;</code> operator and in <code>elm-css</code> as the <code>children</code> function. (By design, there is no operator equivalent in <code>elm-css</code>) There is also a <code>descendants</code>  function, an <code>adjacentSiblings</code> function, and so on.</p>

<p>Note that <code>zero</code> compiles to <code>0</code> with no units. The <code>padding</code> function
is ordinarily expecting a value with units associated, but <code>zero</code> works too.
You could also have passed <code>(px 0)</code> to generate <code>padding: 0px;</code> instead of
<code>padding: 0;</code>, but you could not have passed <code>0</code> because the <code>padding</code>
function does not accept raw numbers; the compiler would have given a type error.</p>

<p>Also note that we called <code>margin2</code>, not <code>margin</code>. This is the convention for
handling CSS properties that accept different numbers of arguments. In addition
to <code>margin2</code>, there is also <code>margin</code> (e.g. <code>margin (em 2)</code> would compile to
<code>margin: 2em;</code>) as well as <code>margin3</code> and <code>margin4</code>.</p>

<p>Finally, note that <code>margin</code> accepts <code>auto</code> instead of a number with units associated. If you try to pass <code>auto</code> to <code>padding</code>, however, you will get a type error; according to the CSS specification, <code>auto</code> is a legal value for <code>margin</code> but not for <code>padding</code>, and <code>elm-css</code> is aware of this.</p>

<h2 id="mixins">Mixins</h2>

<h2 id="sharing-namespaces-with-the-view">Sharing Namespaces with the View</h2>
<p>-}</p>
