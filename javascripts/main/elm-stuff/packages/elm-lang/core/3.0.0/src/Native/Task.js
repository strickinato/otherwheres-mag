Elm.Native.Task={},Elm.Native.Task.make=function(t){function a(t){return{tag:"Succeed",value:t}}function n(t){return{tag:"Fail",value:t}}function e(t){return{tag:"Async",asyncFunction:t}}function u(t,a){return{tag:"AndThen",task:t,callback:a}}function c(t,a){return{tag:"Catch",task:t,callback:a}}function s(t){l({task:t},function(){})}function i(a,n){function e(){if(c.shift(),c.length>0){var t=c[0];setTimeout(function(){l(t,e)},0)}}function u(t){var a={task:t};c.push(a),1===c.length&&l(a,e)}var c=[];return v||(v=Elm.Native.Signal.make(t)),v.output("perform-tasks-"+a,u,n),u(n.value),n}function r(t,a){return{status:t,task:a}}function l(t,a){for(var n=r("runnable",t.task);"runnable"===n.status;)n=o(a,t,n.task);"done"===n.status&&(t.task=n.task,a()),"blocked"===n.status&&(t.task=n.task)}function o(t,a,n){var e=n.tag;if("Succeed"===e||"Fail"===e)return r("done",n);if("Async"===e){var u={},c=!0,s=!1;return n.asyncFunction(function(n){u.tag=n.tag,u.value=n.value,c?s=!0:l(a,t)}),c=!1,r(s?"done":"blocked",u)}if("AndThen"===e||"Catch"===e){for(var i=r("runnable",n.task);"runnable"===i.status;)i=o(t,a,i.task);if("done"===i.status){var k=i.task,f=k.tag,v="Succeed"===f&&"AndThen"===e,d="Fail"===f&&"Catch"===e;return v||d?r("runnable",n.callback(k.value)):r("runnable",k)}if("blocked"===i.status)return r("blocked",{tag:e,task:i.task,callback:n.callback})}}function k(t){return e(function(n){setTimeout(function(){n(a(d.Tuple0))},t)})}function f(t){return e(function(n){var e=setTimeout(function(){s(t)},0);n(a(e))})}if(t.Native=t.Native||{},t.Native.Task=t.Native.Task||{},t.Native.Task.values)return t.Native.Task.values;var v,d=(Elm.Result.make(t),Elm.Native.Utils.make(t));return t.Native.Task.values={succeed:a,fail:n,asyncFunction:e,andThen:F2(u),catch_:F2(c),perform:s,performSignal:i,spawn:f,sleep:k}};