var _elm_lang$core$Native_Utils=function(){function r(r,e){for(var n,o=[],i=t(r,e,0,o);i&&(n=o.pop());)i=t(n.x,n.y,0,o);return i}function t(r,e,n,o){if(n>100)return o.push({x:r,y:e}),!0;if(r===e)return!0;if("object"!=typeof r){if("function"==typeof r)throw new Error('Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense. Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#== which describes why it is this way and what the better version will look like.');return!1}if(null===r||null===e)return!1;if(r instanceof Date)return r.getTime()===e.getTime();if(!("ctor"in r)){for(var i in r)if(!t(r[i],e[i],n+1,o))return!1;return!0}if(("RBNode_elm_builtin"===r.ctor||"RBEmpty_elm_builtin"===r.ctor)&&(r=_elm_lang$core$Dict$toList(r),e=_elm_lang$core$Dict$toList(e)),"Set_elm_builtin"===r.ctor&&(r=_elm_lang$core$Set$toList(r),e=_elm_lang$core$Set$toList(e)),"::"===r.ctor){for(var a=r,c=e;"::"===a.ctor&&"::"===c.ctor;){if(!t(a._0,c._0,n+1,o))return!1;a=a._1,c=c._1}return a.ctor===c.ctor}if("_Array"===r.ctor){var u=_elm_lang$core$Native_Array.toJSArray(r),f=_elm_lang$core$Native_Array.toJSArray(e);if(u.length!==f.length)return!1;for(var l=0;l<u.length;l++)if(!t(u[l],f[l],n+1,o))return!1;return!0}if(!t(r.ctor,e.ctor,n+1,o))return!1;for(var i in r)if(!t(r[i],e[i],n+1,o))return!1;return!0}function e(r,t){if("object"!=typeof r)return r===t?p:t>r?h:m;if(r instanceof String){var n=r.valueOf(),o=t.valueOf();return n===o?p:o>n?h:m}if("::"===r.ctor||"[]"===r.ctor){for(;"::"===r.ctor&&"::"===t.ctor;){var i=e(r._0,t._0);if(i!==p)return i;r=r._1,t=t._1}return r.ctor===t.ctor?p:"[]"===r.ctor?h:m}if("_Tuple"===r.ctor.slice(0,6)){var i,a=r.ctor.slice(6)-0,c="cannot compare tuples with more than 6 elements.";if(0===a)return p;if(a>=1){if(i=e(r._0,t._0),i!==p)return i;if(a>=2){if(i=e(r._1,t._1),i!==p)return i;if(a>=3){if(i=e(r._2,t._2),i!==p)return i;if(a>=4){if(i=e(r._3,t._3),i!==p)return i;if(a>=5){if(i=e(r._4,t._4),i!==p)return i;if(a>=6){if(i=e(r._5,t._5),i!==p)return i;if(a>=7)throw new Error("Comparison error: "+c)}}}}}}return p}throw new Error("Comparison error: comparison is only defined on ints, floats, times, chars, strings, lists of comparable values, and tuples of comparable values.")}function n(r,t){return{ctor:"_Tuple2",_0:r,_1:t}}function o(r){return new String(r)}function i(r){return d++}function a(r,t){var e={};for(var n in r)e[n]=r[n];for(var n in t)e[n]=t[n];return e}function c(r,t){return{ctor:"::",_0:r,_1:t}}function u(r,t){if("string"==typeof r)return r+t;if("[]"===r.ctor)return t;var e=c(r._0,b),n=e;for(r=r._1;"[]"!==r.ctor;)n._1=c(r._0,b),r=r._1,n=n._1;return n._1=t,e}function f(r,t){return function(e){throw new Error("Ran into a `Debug.crash` in module `"+r+"` "+s(t)+"\nThe message provided by the code author is:\n\n    "+e)}}function l(r,t,e){return function(n){throw new Error("Ran into a `Debug.crash` in module `"+r+"`\n\nThis was caused by the `case` expression "+s(t)+".\nOne of the branches ended with a crash and the following value got through:\n\n    "+_(e)+"\n\nThe message provided by the code author is:\n\n    "+n)}}function s(r){return r.start.line==r.end.line?"on line "+r.start.line:"between lines "+r.start.line+" and "+r.end.line}function _(r){var t=typeof r;if("function"===t)return"<function>";if("boolean"===t)return r?"True":"False";if("number"===t)return r+"";if(r instanceof String)return"'"+g(r,!0)+"'";if("string"===t)return'"'+g(r,!1)+'"';if(null===r)return"null";if("object"===t&&"ctor"in r){var e=r.ctor.substring(0,5);if("_Tupl"===e){var n=[];for(var o in r)"ctor"!==o&&n.push(_(r[o]));return"("+n.join(",")+")"}if("_Task"===e)return"<task>";if("_Array"===r.ctor){var i=_elm_lang$core$Array$toList(r);return"Array.fromList "+_(i)}if("<decoder>"===r.ctor)return"<decoder>";if("_Process"===r.ctor)return"<process:"+r.id+">";if("::"===r.ctor){var n="["+_(r._0);for(r=r._1;"::"===r.ctor;)n+=","+_(r._0),r=r._1;return n+"]"}if("[]"===r.ctor)return"[]";if("Set_elm_builtin"===r.ctor)return"Set.fromList "+_(_elm_lang$core$Set$toList(r));if("RBNode_elm_builtin"===r.ctor||"RBEmpty_elm_builtin"===r.ctor)return"Dict.fromList "+_(_elm_lang$core$Dict$toList(r));var n="";for(var a in r)if("ctor"!==a){var c=_(r[a]),u=c[0],f="{"===u||"("===u||"<"===u||'"'===u||c.indexOf(" ")<0;n+=" "+(f?c:"("+c+")")}return r.ctor+n}if("object"===t){if(r instanceof Date)return"<"+r.toString()+">";if(r.elm_web_socket)return"<websocket>";var n=[];for(var o in r)n.push(o+" = "+_(r[o]));return 0===n.length?"{}":"{ "+n.join(", ")+" }"}return"<internal structure>"}function g(r,t){var e=r.replace(/\\/g,"\\\\").replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/\r/g,"\\r").replace(/\v/g,"\\v").replace(/\0/g,"\\0");return t?e.replace(/\'/g,"\\'"):e.replace(/\"/g,'\\"')}var h=-1,p=0,m=1,v={ctor:"_Tuple0"},d=0,b={ctor:"[]"};return{eq:r,cmp:e,Tuple0:v,Tuple2:n,chr:o,update:a,guid:i,append:F2(u),crash:f,crashCase:l,toString:_}}();