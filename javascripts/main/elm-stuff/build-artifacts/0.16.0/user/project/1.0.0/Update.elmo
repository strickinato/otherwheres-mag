Elm.Update = Elm.Update || {};
Elm.Update.make = function (_elm) {
   "use strict";
   _elm.Update = _elm.Update || {};
   if (_elm.Update.values) return _elm.Update.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Util = Elm.Util.make(_elm);
   var _op = {};
   var nextCurrentPhraseIndex = function (model) {
      var newCurrentPhraseIndex = model.currentPhraseIndex + 1;
      var length = $Array.length(model.phrases);
      return A2($Basics._op["%"],newCurrentPhraseIndex,length);
   };
   var NoOp = {ctor: "NoOp"};
   var AnimateClosing = function (a) {    return {ctor: "AnimateClosing",_0: a};};
   var Tick = function (a) {    return {ctor: "Tick",_0: a};};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "Tick": var _p2 = _p0._0;
           var _p1 = model.phraseAnimationState;
           var elapsedTime = _p1.elapsedTime;
           var prevClockTime = _p1.prevClockTime;
           var newElapsedTime = elapsedTime + (_p2 - prevClockTime);
           var newModel = _U.cmp(newElapsedTime,1.5 * $Time.second) > 0 ? _U.update(model,
           {currentPhraseIndex: nextCurrentPhraseIndex(model),phraseAnimationState: {elapsedTime: 0,prevClockTime: _p2}}) : _U.update(model,
           {phraseAnimationState: {elapsedTime: newElapsedTime,prevClockTime: _p2}});
           return A2($Util._op["=>"],newModel,$Effects.tick(Tick));
         case "AnimateClosing": var _p4 = _p0._0;
           var newElapsedTime = function () {
              var _p3 = model.closingAnimationState;
              if (_p3.ctor === "Nothing") {
                    return 0;
                 } else {
                    return _p3._0.elapsedTime + (_p4 - _p3._0.prevClockTime);
                 }
           }();
           return _U.cmp(newElapsedTime,$Time.second / 2.0) > 0 ? A2($Util._op["=>"],
           _U.update(model,{expandedIssue: $Model.None,displayImage: $Model.All,closingAnimating: false,closingAnimationState: $Maybe.Nothing}),
           $Effects.none) : A2($Util._op["=>"],
           _U.update(model,{closingAnimating: true,closingAnimationState: $Maybe.Just({elapsedTime: newElapsedTime,prevClockTime: _p4})}),
           $Effects.tick(AnimateClosing));
         case "ExpandImage": return A2($Util._op["=>"],_U.update(model,{displayImage: _p0._0}),$Effects.none);
         case "ExpandIssue": var _p5 = _p0._0;
           if (_p5.ctor === "None") {
                 return A2($Util._op["=>"],model,$Effects.tick(AnimateClosing));
              } else {
                 return A2($Util._op["=>"],
                 _U.update(model,{expandedIssue: _p5,currentPhraseIndex: 0,phraseAnimationState: $Model.resetTime(model.phraseAnimationState)}),
                 $Effects.none);
              }
         case "HoverIssue": return A2($Util._op["=>"],_U.update(model,{hoveredIssue: _p0._0}),$Effects.none);
         case "Viewport": return A2($Util._op["=>"],_U.update(model,{tooSmall: false}),$Effects.none);
         default: return A2($Util._op["=>"],model,$Effects.none);}
   });
   var Viewport = function (a) {    return {ctor: "Viewport",_0: a};};
   var ExpandImage = function (a) {    return {ctor: "ExpandImage",_0: a};};
   var HoverIssue = function (a) {    return {ctor: "HoverIssue",_0: a};};
   var ExpandIssue = function (a) {    return {ctor: "ExpandIssue",_0: a};};
   return _elm.Update.values = {_op: _op
                               ,ExpandIssue: ExpandIssue
                               ,HoverIssue: HoverIssue
                               ,ExpandImage: ExpandImage
                               ,Viewport: Viewport
                               ,Tick: Tick
                               ,AnimateClosing: AnimateClosing
                               ,NoOp: NoOp
                               ,update: update
                               ,nextCurrentPhraseIndex: nextCurrentPhraseIndex};
};