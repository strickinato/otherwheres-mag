Elm.Model = Elm.Model || {};
Elm.Model.make = function (_elm) {
   "use strict";
   _elm.Model = _elm.Model || {};
   if (_elm.Model.values) return _elm.Model.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Util = Elm.Util.make(_elm);
   var _op = {};
   var isShowingMenu = function (model) {    var _p0 = model.expandedIssueId;if (_p0.ctor === "Just") {    return false;} else {    return true;}};
   var findSelectedIssue = function (model) {
      return $List.head(A2($List.filter,function (issue) {    return A2($Util._op["?=="],issue.id,model.expandedIssueId);},model.issues));
   };
   var currentPhrase = function (model) {    return A2($Maybe.withDefault,"",A2($Array.get,model.currentPhraseIndex,model.phrases));};
   var otherwheresPhrases = $Array.fromList(_U.list(["artsy fartsy","ready to pop","Toby\'s worst nightmare","an OK zine"]));
   var initialAnimation = {prevClockTime: 0.0,elapsedTime: 0.0};
   var AnimationState = F2(function (a,b) {    return {prevClockTime: a,elapsedTime: b};});
   var Issue = F4(function (a,b,c,d) {    return {id: a,symbol: b,$class: c,title: d};});
   var allIssues = _U.list([A4(Issue,1,".","",".")
                           ,A4(Issue,2,"IV","volume4","Disasters")
                           ,A4(Issue,3,"III","volume3","Comics")
                           ,A4(Issue,4,"II","volume2","Travel")
                           ,A4(Issue,5,"I","volume1","Truth or Fiction")]);
   var init = {issues: allIssues
              ,expandedIssueId: $Maybe.Nothing
              ,hoveredIssueId: $Maybe.Nothing
              ,phraseAnimationState: initialAnimation
              ,currentPhraseIndex: 0
              ,phrases: otherwheresPhrases};
   var Model = F6(function (a,b,c,d,e,f) {
      return {issues: a,expandedIssueId: b,hoveredIssueId: c,phraseAnimationState: d,currentPhraseIndex: e,phrases: f};
   });
   return _elm.Model.values = {_op: _op
                              ,Model: Model
                              ,Issue: Issue
                              ,init: init
                              ,AnimationState: AnimationState
                              ,initialAnimation: initialAnimation
                              ,otherwheresPhrases: otherwheresPhrases
                              ,currentPhrase: currentPhrase
                              ,allIssues: allIssues
                              ,findSelectedIssue: findSelectedIssue
                              ,isShowingMenu: isShowingMenu};
};