Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Primer = Elm.Primer.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Update = Elm.Update.make(_elm),
   $Util = Elm.Util.make(_elm),
   $View = Elm.View.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var viewport = A2($Signal.map,$Update.Viewport,$Primer.prime($Window.dimensions));
   var openStripe = $Signal.mailbox({ctor: "_Tuple0"});
   var requestOpenStripe = Elm.Native.Port.make(_elm).outboundSignal("requestOpenStripe",function (v) {    return [];},openStripe.signal);
   var app = $StartApp.start({init: A2($Util._op["=>"],$Model.init,$Effects.tick($Update.Tick))
                             ,update: $Update.update(openStripe.address)
                             ,view: $View.view
                             ,inputs: _U.list([viewport])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.Main.values = {_op: _op,app: app,main: main,openStripe: openStripe,viewport: viewport};
};